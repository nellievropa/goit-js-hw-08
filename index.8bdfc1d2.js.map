{"mappings":"AAAA,MAAMA,EAAYC,SAASC,cAAc,eACzCC,QAAQC,IAAIJ,GACZ,MAAMK,EAAO,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEX,IAAIC,EAAS,IAMTC,EAAW,GACXC,EAAW,GAEuD,SAA7DC,IACL,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBD,GAAU,sCAAsCC,YAItBX,EAApBY,UAAYF,C,CAgEiB,SAAlCG,EAASC,GAG8B,OAAzCT,EAAKU,MAAMC,GAASA,EAAKC,OAAMC,GAAMJ,EAAIK,SAASD,M,CAhEvCT,IAGsDT,EAA9DoB,iBAAiB,SAE3B,SAAiBC,GAE0D,MAAjEC,OAAEA,GAAWD,EAEwB,IAAtCC,EAAOC,UAAUC,SAAS,YAAcF,EAAOG,YAChD,OAakB,IAAtBC,GAAS,EACT,MAAOR,EAAMS,OAAOL,EAAOM,QAAQV,IAEpB,MAAXZ,GACAC,EAASsB,KAAKX,GACdQ,EAASb,EAASN,KAElBC,EAASqB,KAAKX,GACdQ,EAASb,EAASL,IAItB,GADqDc,EAA5CG,YAAcnB,EACnBoB,EAGA,OAFAvB,QAAQC,IAAI,aAAaE,KAiC7BG,IACAF,EAAW,GACXC,EAAW,QACXF,EAAS,KA5BTH,QAAQC,IAAKS,EAASN,IAGeD,EAAjB,MAAXA,EAAiB,IAAM,G","sources":["src/js/index.js"],"sourcesContent":["const container = document.querySelector('.js-content')\nconsole.log(container);\nconst wins = [\n    [1, 2, 3],\n    [3, 6, 9],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 8],\n    [1, 5, 9],\n    [3, 5, 7],\n];\nlet player = \"X\";\n// якщо залишити цю змінну  тутБ то кожен раз буде додаватися нове поле ігрове\n// тому переносимо її функцію createMarkup()\n\n//  створимо двох гравців і їх пусті масиви, які будуть заповнюватися даними\n// щоб легко було очистити поля задамо змінні через Let а не const\nlet historyX = [];\nlet historyO = [];\n// створюємо нову функцию, щоб можна було перевикористовувати, і переносимо дані в неї\nfunction createMarkup() {\n    let markup = \"\";\n    for (let i = 1; i < 10; i += 1){\n        markup += `<div class=\"item js-item\" data-id=\"${i}\"></div>`;\n    }\n    // console.log(markup);\n    // наповнили контейнер квадратиками!!\n    container.innerHTML = markup;\n}\n// і зразу її викликаємо\ncreateMarkup();\n\n// щоб знати, на який квадратик клікаєм на БАТЬКІВСЬКИЙ елемент вішаємо прослуховувача\ncontainer.addEventListener('click', onClick);\n\nfunction onClick(evt) {\n    // коли побвачили, що елемент часто повторюється- робимо змінну і прибираємо його з коду\n    const { target } = evt;\n// якщо ми клікнули НЕ на квадратик, то одразу виходимо\n    if (!target.classList.contains(\"js-item\") || target.textContent) {\n        return;\n    }\n    // а потім другу умову додаємо через або в перший иф\n    // ця умова не дає змінювати Х на 0 на ОДНІЙ клітинці!!!\n    // якщо клітинка пуста - дозволяємо хід, якщо зайнята - не дозволяємо\n    // if (etarget.textContent) {\n    //     return;\n    // }\n    // щоб дізнатись ID клітинки на яку клікнули- шукаємо її номер, зразу для обох ігроків\n     // але з data atributa  він прийде у форматі рядка, а наші масиви- то числа тому приводимо його до числа \n\n    // const { id } = Number(target.dataset); - так не працює, тому змінюємо на \n// створимо змінну для переможця\nlet result = false;\n    const  id  = Number(target.dataset.id);\n    // нам треба визначитись, хто робить хід, тому створюємо умову\n    if (player === \"X\") {\n        historyX.push(id);\n        result = isWinner(historyX)\n    } else {\n        historyO.push(id);\n        result = isWinner(historyO)\n    }\n      // текстовий контент елемента, по якому клікнули = Х - це перший ход\n      target.textContent = player;\n    if (result) {\n        console.log(`Winner is ${player}`);\n        resetGame();\n        return;\n    }\n// отримуємо просто номер  const {id} = target.dataset\n    // але з data atributa  він прийде у форматі рядка, а наші масиви- то числа \n    // console.log('X', historyX);\n    //  console.log('0', history0);\n    console.log( isWinner(historyX));\n  \n// змінюємо чергу ходу на 0: якщо був Х змінюємо на 0\n    player = player === 'X' ? 'O' : 'X';\n\n    // currentTarget-батько(весь контейнер\n    // target-кожен маленький квадратик)\n    // console.log(evt.currentTarget);\n    // console.log(evt.target)\n}\n// щоб визначити, хто виграв нам потрібно знати ID клітинки!!!\n// тому ми його додаємо в код вище!\n\n// створимо функцію, яка буде перевіряти чи виграв хтось з гравців\n// порівнювати з виграшими комбінаціями\n// в функцыю приходить ысторыя ходів в вигляді масива\n\nfunction isWinner(arr) {\n//  перебираємо масив з допомогою методу some\n// перевіряємо чи є в історії ходів подібна комбінація цифр\nreturn wins.some((item) => item.every(id => arr.includes(id))); \n}\n\n// щоб очищати ігрові поля створимо функцію resetGame і викличемо її в тому разі коли є переможець\nfunction resetGame(){\n    createMarkup();\n    historyX = [];\n    historyO = [];\n    player = 'X';\n}\n\n\n\n// const content = document.querySelector('.content')\n// const restart = document.querySelector('.js-restart');\n// content.insertAdjacentHTML('beforeend', createMarkup())\n// content.addEventListener('click', onClick);\n// restart.addEventListener('click', onRestart);\n// let player = 'X';\n\n// const win = [\n//     [1, 2, 3],\n//     [3, 6, 9],\n//     [4, 5, 6,],\n//     [7, 8, 9],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [1, 5, 9],\n//     [3, 5, 7,]\n// ];\n\n// function createMarkup() {\n//     let markup = '';\n//     for (let i = 1; i <= 9; i += 1)  {\n// markup += `<div class=\"item\" data-id= \"${i}\"></div>`\n//     }\n//     return markup\n// }\n\n// function onClick(evt) {\n//     if (!evt.target.textContent) {\n//         if (player === 'X') {\n\n//         }\n//         player = play === \"X\" ? \"0\" : \"X\";\n//     } else {\n//         alert('Change!!!')\n//     }\n// }\n\n// function onRestart() {\n//     player = \"X\";\n//     content.innerHTML = createMarkup()\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const session = document.querySelector('.session');\n// const local = document.querySelector('.local');\n// const remove = document.querySelector('.remove');\n\n// session.addEventListener('click', onSession);\n// const arr =[1,2,3,4,5,]\n// function onSession() {\n//     // sessionStorage.setItem('session', 'hello session');\n//     const data = JSON.parse(localStorage.getItem('local')) || [];\n//     console.log(data);\n//     // якщо це- const arr =[1,2,3,4,5,]-масив то й тут додаємо пустий масив \n//     // const resp = JSON.parse(data)\n//     // console.log(resp);\n//     // sessionStorage.setItem('session', arr);\n\n//     data.forEach(element => {\n//         console.log(element);\n//     });\n// }\n\n// local.addEventListener('click', onLocal);\n\n// function onLocal() {\n//     // приводимо до рядка\n//     localStorage.setItem('local', JSON.stringify(arr));\n//     localStorage.setItem('local1', JSON.stringify(arr));\n//     localStorage.setItem('local2', JSON.stringify(arr));\n// }\n\n// remove.addEventListener('click', onRemove)\n\n// function onRemove() {\n// // localStorage.removeItem('local');\n// localStorage.clear();\n// }"],"names":["$85a5f86b715fe7db$var$container","document","querySelector","console","log","$85a5f86b715fe7db$var$wins","$85a5f86b715fe7db$var$player","$85a5f86b715fe7db$var$historyX","$85a5f86b715fe7db$var$historyO","$85a5f86b715fe7db$var$createMarkup","markup","i","innerHTML","$85a5f86b715fe7db$var$isWinner","arr","some","item","every","id","includes","addEventListener","evt","target","classList","contains","textContent","result","Number","dataset","push"],"version":3,"file":"index.8bdfc1d2.js.map"}